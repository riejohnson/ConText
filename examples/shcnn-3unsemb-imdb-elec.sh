#!/bin/bash
  #####
  #####  Training using three types of unsupervised embeddings
  #####
  #####  Step 1. Generate region files.
  #####  Step 2. Training. 
  #####
  #####  NOTE: Unsupervised embedding files are downloaded if sdir=for-semi.
  #####

  #-----------------#
  gpu=-1  # <= change this to, e.g., "gpu=0" to use a specific GPU. 
  mem=2   # pre-allocate 2GB device memory 
  source sh-common.sh
  #-----------------# 
  nm=imdb
# nm=elec  # <= Uncomment this to train/test on Elec.
  
  #---  Prepare unsupervised embedding files.  Downloaded if sdir=for-semi. 
  p=5; dim=100  
  s_fn0=${nm}-uns-p${p}.dim${dim}.epo10.ReLayer0      # generated by shcnn-unsup-imdb-elec.sh
  s_fn1=${nm}-parsup-p3p${p}.dim${dim}.epo10.ReLayer0 # generated by shcnn-parsup-imdb-elec.sh
  s_fn2=${nm}-unsx3-p${p}.dim${dim}.epo10.ReLayer0    # generated by shcnn-unsup3-imdb-elec.sh
  sdir=for-semi    # <= Download unsupervised embedding files. 
  # sdir=$outdir   # <= Use the output of shcnn-{unsup|unsup3|parsup}-${nm}.sh 
  #####
  ##### WARNING: If your system uses Big Endian (Motorola convention), you cannot use the 
  #####    downloaded files!  They are in the little-endian format (Intel convention)!
  #####
  for fn in $s_fn0 $s_fn1 $s_fn2; do 
    find_file $sdir $fn; if [ $? != 0 ]; then echo $shnm: find_file failed.; exit 1; fi
  done 
  s_fn0=${sdir}/${s_fn0}; s_fn1=${sdir}/${s_fn1}; s_fn2=${sdir}/${s_fn2}  
  
  z=4 # to avoid name conflict with other scripts    
  options="LowerCase UTF8"

  #---  Step 1. Generate input files. 
  xvoc1=${tmpdir}/${nm}${z}-trn.vocab
  $exe $gpu write_word_mapping layer0_fn=$s_fn0 layer_type=Weight+ word_map_fn=$xvoc1  # extract word mapping from the embedding file. 
  if [ $? != 0 ]; then echo $shnm: write_word_mapping failed.; exit 1; fi

  xvoc3=${tmpdir}/${nm}${z}-trn-123gram.vocab  
  $exe $gpu write_word_mapping layer0_fn=$s_fn2 layer_type=Weight+ word_map_fn=$xvoc3  # extract word mapping from the embedding file. 
  if [ $? != 0 ]; then echo $shnm: write_word_mapping failed.; exit 1; fi

  for set in train test; do 
    opt=NoSkip
    #---  dataset#0: for the main layer (seq, same as shcnn-{unsup|unsup3|parsup}-imdb-elec.sh)
    rnm=${tmpdir}/${nm}${z}-${set}-p${p}seq
    $prep_exe gen_regions $opt $options region_fn_stem=$rnm \
      input_fn=data/${nm}-${set} vocab_fn=$xvoc1 label_dic_fn=data/${nm}_cat.dic \
      patch_size=$p padding=$((p-1))
    if [ $? != 0 ]; then echo $shnm: gen_regions failed.; exit 1; fi

    #---  dataset#1: for the side layer (bow, same as shcnn-{unsup|parsup}-imdb-elec.sh)
    rnm=${tmpdir}/${nm}${z}-${set}-p${p}bow
    $prep_exe gen_regions $opt $options Bow RegionOnly region_fn_stem=$rnm \
      input_fn=data/${nm}-${set} vocab_fn=$xvoc1 \
      patch_size=$p padding=$((p-1))
    if [ $? != 0 ]; then echo $shnm: gen_regions failed.; exit 1; fi

    #---  dataset#2: for the side layer (bag-of-{1,2,3}-grams, same as shcnn-unsup3-imdb-elec.sh)
    rnm=${tmpdir}/${nm}${z}-${set}-p${p}x3bow
    $prep_exe gen_regions $opt $options Bow RegionOnly region_fn_stem=$rnm \
      input_fn=data/${nm}-${set} vocab_fn=$xvoc3 \
      patch_size=$p padding=$((p-1))
    if [ $? != 0 ]; then echo $shnm: gen_regions failed.; exit 1; fi
  done


  #---  Step 2. Training. 
  mynm=shcnn-3unsemb-${nm}-dim${dim}
  logfn=${logdir}/${mynm}.log; csvfn=${csvdir}/${mynm}.csv
  echo; echo Training ... This takes a while.  See $logfn and $csvfn for progress. 
  $exe $gpu:4 train V2 datatype=sparse \
     trnname=${nm}${z}-train-p${p} tstname=${nm}${z}-test-p${p} data_dir=$tmpdir \
     dsno0=seq dsno1=bow dsno2=x3bow \
     reg_L2=1e-4 top_dropout=0.5 step_size=0.1 \
     loss=Square mini_batch_size=100 momentum=0.9 random_seed=1 \
     num_epochs=100 ss_scheduler=Few ss_decay=0.1 ss_decay_at=80 \
     layers=2 num_sides=3 \
     0layer_type=WeightS+ 0nodes=1000 0activ_type=Rect \
     1layer_type=Pooling 1pooling_type=Max 1num_pooling=1 1resnorm_type=Text  \
     0side0_layer_type=Weight+ 0side0_layer_fn=$s_fn0 0side0_dsno=1 \
     0side1_layer_type=Weight+ 0side1_layer_fn=$s_fn1 0side1_dsno=1 \
     0side2_layer_type=Weight+ 0side2_layer_fn=$s_fn2 0side2_dsno=2 \
     evaluation_fn=$csvfn test_interval=25 > $logfn
  if [ $? != 0 ]; then echo $shnm: traning failed.; exit 1; fi

  rm -f ${tmpdir}/${nm}${z}*